#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('robonaut-server:server');
var http = require('http');
const socketIo = require("socket.io");
var SerialPort = require('serialport');
const fs = require('fs')
var moment = require('moment');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const io = socketIo(server)

console.log('List serial ports...');
SerialPort.list().then(portInfos => {
  portInfos.forEach(portInfo => {
    console.log('portInfo', portInfo);
  })
})

const serialPortNumber = 'COM29' //'/dev/ttyAMA0'

var port = new SerialPort(serialPortNumber, {
   baudRate: 115200,
   dataBits: 8,
   parity: 'none',
   stopBits: 1,
   flowControl: false
});
 
port.on('open', function() {
  console.log('Serial port opened: ' + serialPortNumber)
});

var timestamp = new Date()
var serialData = '';

var counter = 1.0000;
 
// open errors will be emitted as an error event 
port.on('error', function(err) {
  console.log('Error: ', err.message);
  if(err.message.includes('busy') === true || err.message.includes('no device') === true)
  {
    SerialPort.list().then( ports => {
      ports.forEach(console.log)
      err => console.log('serialport error event: ' + err)
    })
  }
});

const momentFormatString = "YYYY. MM. DD. HH:mm:ss:SSS"
const momentFormatStringForFileNames = "YYYY-MM-DD-HH-mm-ss-SSS"

const logWrapper = (message) => {
  const timestamp = moment().format(momentFormatString);
  console.log(`[${timestamp}] ${message}`);
}

var serialLogFiles = {
  parameters: '',
  others: ''
}

const initSerialLogFiles = () => {
  const timestampInFilename = moment().format(momentFormatStringForFileNames)
  serialLogFiles.parameters = `serial-logs/serial-log-parameters-${timestampInFilename}.txt`
  serialLogFiles.others = `serial-logs/serial-log-others-${timestampInFilename}.txt`
}

var timerHandle;
var counter = 10.00
var simulatedSerialData = {
  "car": [ counter, counter + 1.1, 2 * counter, counter + 2, counter + 3, counter + 4, counter + 5, counter + 6, counter + 7 ],
  "motorCtrl_integral_max": 4,
  "motorCtrl_P": 1,
  "motorCtrl_I": 10,
  "frontLineCtrl_P_slow": 1.5,
  "frontLineCtrl_D_slow": 100,
  "isRemoteControlled": true
}

const simulateSerialRx = () => {
  //logWrapper('simulateSerialRx: ' + counter)
  counter += 0.25
  let simulatedJson = {}
  for (const [key, value] of Object.entries(simulatedSerialData)) {
    counter += 0.25
    if(typeof(value) === 'object') {
      value.forEach((singleValue, index) => {
        //console.log('value.forEach', index, singleValue, counter);
        switch(index) {
          case 1: simulatedJson['speed'] = counter; break;
          case 2: simulatedJson['angle'] = counter + 2; break;
          case 3: simulatedJson['distance'] = counter * 10; break;
        }
      })
    }
    else {
      //console.log(`First level: ${key}: ${value}`);
      // Add first level key-values to result json
      simulatedJson[key] = value
    }
  }
  counter += 0.25
  //console.log('simulatedJson', simulatedJson);
  io.emit("dataFromSerial", JSON.stringify(simulatedJson));
}

io.on("connection", socket => {

  const timestampConnectedClient = moment().format(momentFormatString);
  console.log(`[${timestampConnectedClient}] New client connected from`, socket.request.headers.origin);
  initSerialLogFiles()
  fs.appendFile(serialLogFiles.parameters, `Log file for parameters created on ${timestampConnectedClient}\n`, () => {})
  fs.appendFile(serialLogFiles.others, `Log file for other messages created on ${timestampConnectedClient}\n`, () => {})

  timerHandle = setInterval(simulateSerialRx, 2000)

  socket.on("disconnect", (reason) => {
    const timestampDisconnectedClient = moment().format(momentFormatString);
    console.log(`[${timestampDisconnectedClient}] Client disconnected with reason:`, reason);
    clearInterval(timerHandle)
  });
  
  socket.on('dataFromClient', function(data) {
    logWrapper('DATA FROM CLIENT: ' + data)
    port.write(data)
  });

});

var firstDataReceived = false
const handleSerialMessage = (serialMessage) => {

  // Handle P messages
  if(serialMessage.includes('[P]') === true) {
    const parsedData = serialMessage.split('[P]')[1].split('$')[0]
    if(!firstDataReceived) {
      // Write CSV header to the file
      logWrapper('firstDataReceived!')
      if(serialLogFiles.parameters) {
        try {
          const jsonData = JSON.parse(parsedData)
          const keys = Object.keys(jsonData)
          console.log(keys);
          console.log(keys.join(','));
          fs.appendFile(serialLogFiles.parameters, `${keys.join(',')}\n`);
        }
        catch(error) {
          logWrapper(error)
        }
      }
      firstDataReceived = true
    }
    logWrapper('Serial message with P:' + parsedData)
    io.emit("dataFromSerial", parsedData);
    if(serialLogFiles.parameters) {
      fs.appendFile(serialLogFiles.parameters, `${parsedData}\n`);
    }
  }
  // Handle other messages
  else {
    const parsedData = serialMessage.split('$')[0]
    logWrapper('Serial message without P:' + parsedData)
    io.emit('logFromSerial', parsedData)
    if(serialLogFiles.others) {
      fs.appendFile(serialLogFiles.others, `${parsedData}\n`);
    }
  }

}

port.on('data', function(data) {
  const rawData = data.toString().trim()
  logWrapper('Serial data: ' + rawData)
  serialData += data;
  if (data.indexOf('$') != -1) { 
    handleSerialMessage(serialData)
    serialData = '';
  }
});
