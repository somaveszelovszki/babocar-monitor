#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('robonaut-server:server');
var http = require('http');
const socketIo = require("socket.io");
var SerialPort = require('serialport');
const fs = require('fs')
var moment = require('moment');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const io = socketIo(server)

console.log('List serial ports...');
SerialPort.list().then(portInfos => {
  portInfos.forEach(portInfo => {
    console.log('portInfo', portInfo);
  })
})

const serialPortNumber = 'COM31' //'/dev/ttyAMA0'

// var port = new SerialPort('/dev/serial0', {
var port = new SerialPort(serialPortNumber, {
   baudRate: 115200,
   dataBits: 8,
   parity: 'none',
   stopBits: 1,
   flowControl: false
});
 
port.on('open', function() {
  console.log('Serial port opened: ' + serialPortNumber)
});

var timestamp = new Date()
var serialData = '';

var counter = 1.0000;
const getJsonFile = async socket => {
  //socket.emit("map", {x: counter++, y: counter+1});
  try {
    fs.readFile('../robonaut_server/bin/serialData.json', (err, data) => {
      if (err) {
          throw err;
      }
      else {
          var jsonFile = JSON.parse(data)
          console.log('Send to client with counter=' + counter)
          jsonFile['motorCtrl_integral_max'] = counter += 0.1;
          jsonFile['motorCtrl_P'] = counter+6;
          jsonFile['motorCtrl_I'] = counter-2;
          jsonFile['car']['pose']['pos_m']['X'] = 10;
          jsonFile['car']['pose']['pos_m']['Y'] = counter += 0.1;
          socket.emit("dataFromJSON", jsonFile); // Emitting a new message. It will be consumed by the client
      }
    });
  } catch (error) {
    console.error(`Error: ${error}`);
  }
};
 
// open errors will be emitted as an error event 
port.on('error', function(err) {
  console.log('Error: ', err.message);
  if(err.message.includes('busy') === true || err.message.includes('no device') === true)
  {
    SerialPort.list().then( ports => {
      ports.forEach(console.log)
      err => console.log('serialport error event: ' + err)
    })
  }
});

const momentFormatString = "YYYY. MM. DD. HH:mm:ss:SSS"
const momentFormatStringForFileNames = "YYYY-MM-DD-HH-mm-ss-SSS"

const logWrapper = (message) => {
  const timestamp = moment().format(momentFormatString);
  console.log(`[${timestamp}] ${message}`);
}

var serialLogFiles = {
  parameters: '',
  others: ''
}

const initSerialLogFiles = () => {
  const timestampInFilename = moment().format(momentFormatStringForFileNames)
  serialLogFiles.parameters = `serial-logs/serial-log-parameters-${timestampInFilename}.txt`
  serialLogFiles.others = `serial-logs/serial-log-others-${timestampInFilename}.txt`
}

io.on("connection", socket => {
  const timestampConnectedClient = moment().format(momentFormatString);
  console.log(`[${timestampConnectedClient}] New client connected from`, socket.request.headers.origin);

  serialLogFileName = `serial-logs/serial-log-${moment().format(momentFormatStringForFileNames)}.txt`
  fs.appendFile(serialLogFileName, `Log the created on ${timestampConnectedClient}\n`, (error) => {
    if (error) throw error;
    // Write was success, todo here?
  });

  socket.on("disconnect", (reason) => {
    const timestampDisconnectedClient = moment().format(momentFormatString);
    console.log(`[${timestampDisconnectedClient}] Client disconnected with reason:`, reason);
  });
  
  //interval = setInterval(() => getJsonFile(socket), 500);
  
  socket.on('dataFromClient', function(data) {
    logWrapper('DATA FROM CLIENT: ' + data)
    port.write(data)
  });
});

port.on('data', function(data) {
  const rawData = data.toString().trim()
  logWrapper('Serial data: ' + rawData)
  if(serialLogFileName) {
    fs.appendFile(serialLogFileName, rawData, (error) => {
      if (error) throw error;
      // Write was success, todo here?
    });
  }
  else {
   console.log('Log file is not opened.');
  }
  serialData += data;
  if (data.indexOf('$') != -1) {
    //timestamp = new Date()
    //console.log('DATA FROM SERIAL PORT |' + serialData + '|' + '\n');
    //console.log('Send serial data to client: |' + serialData + '|' + '\n\n')    
    if(serialData.includes('[P]') === false) {
      io.emit('logFromSerial', serialData.split('$')[0])
    }
    else {
      const parsedData = serialData.split('[P]')[1].split('$')[0]
      logWrapper('Serial data' + parsedData)
      io.emit("dataFromSerial", parsedData); // Emitting a new message. It will be consumed by the client
    }
    //console.log('Serial data: ' + serialData.split('$')[0])
    serialData = '';
  }
});
