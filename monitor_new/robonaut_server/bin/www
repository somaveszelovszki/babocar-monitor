#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('robonaut-server:server');
var http = require('http');
const socketIo = require("socket.io");
var SerialPort = require('serialport');
const fs = require('fs')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const io = socketIo(server)

var port = new SerialPort('/dev/serial0', {
   baudRate: 115200,
   dataBits: 8,
   parity: 'none',
   stopBits: 1,
   flowControl: false
});
 
port.on('open', function() {
  port.write('main screen turn on', function(err) {
    if (err) {
      return console.log('Error on write: ', err.message);
    }
    console.log('Message sent.');
  });
});

var serialData = '';
port.on('data', function(data) {
  serialData += data;
  if (data.indexOf('$') != -1) {
    console.log('Data received from serial port: ', serialData);
    socket.emit("dataFromSerial", serialData); // Emitting a new message. It will be consumed by the client
    serialData = '';
  }
});

const getJsonFile = async socket => {
  try {
    fs.readFile('../robonaut_server/routes/form.json', (err, data) => {
      if (err) {
          throw err;
      }
      else {
          var jsonFile = JSON.parse(data)
          console.log(jsonFile)
          socket.emit("dataFromJSON", jsonFile); // Emitting a new message. It will be consumed by the client
      }
    });
  } catch (error) {
    console.error(`Error: ${error}`);
  }
};
 
// open errors will be emitted as an error event 
port.on('error', function(err) {
  console.log('Error: ', err.message);
});

let interval;
io.on("connection", socket => {
  console.log("New client connected");
  if (interval) {
    clearInterval(interval);
  }
  interval = setInterval(() => getJsonFile(socket), 3000);
  socket.on("disconnect", () => {
    console.log("Client disconnected");
  });
  socket.on('dataFromClient', function(data) {
    console.log('dataFromClient: ' + data)

  });
});
